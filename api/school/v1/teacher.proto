syntax = "proto3";

package api.school.v1;

import "api/types/types.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "school/api/school/v1;v1";

/*
Reference https://github.com/grpc-ecosystem/grpc-gateway/blob/db7fbefff7c04877cdb32e16d4a248a024428207/examples/internal/proto/examplepb/a_bit_of_everything.proto
Default settings for generating swagger documents
NOTE: because json does not support 64 bits, the int64 and uint64 types under *.swagger.json are automatically converted to string types
Tips: add swagger option to rpc method, example:
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get user by id",
      description: "get user by id",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
*/
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080"
  base_path: ""
  info: {
    title: "school api docs";
    version: "2.0";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Type Bearer your-jwt-token to Value";
      }
    }
  }
};

service teacher {
  // create teacher
  rpc Create(CreateTeacherRequest) returns (CreateTeacherReply) {
    option (google.api.http) = {
      post: "/api/v1/teacher"
      body: "*"
    };
  }

  // delete teacher by id
  rpc DeleteByID(DeleteTeacherByIDRequest) returns (DeleteTeacherByIDReply) {
    option (google.api.http) = {
      delete: "/api/v1/teacher/{id}"
    };
  }

  // update teacher by id
  rpc UpdateByID(UpdateTeacherByIDRequest) returns (UpdateTeacherByIDReply) {
    option (google.api.http) = {
      put: "/api/v1/teacher/{id}"
      body: "*"
    };
  }

  // get teacher by id
  rpc GetByID(GetTeacherByIDRequest) returns (GetTeacherByIDReply) {
    option (google.api.http) = {
      get: "/api/v1/teacher/{id}"
    };
  }

  // list of teacher by query parameters
  rpc List(ListTeacherRequest) returns (ListTeacherReply) {
    option (google.api.http) = {
      post: "/api/v1/teacher/list"
      body: "*"
    };
  }

  // delete teacher by batch id
  rpc DeleteByIDs(DeleteTeacherByIDsRequest) returns (DeleteTeacherByIDsReply) {
    option (google.api.http) = {
      post: "/api/v1/teacher/delete/ids"
      body: "*"
    };
  }

  // get teacher by condition
  rpc GetByCondition(GetTeacherByConditionRequest) returns (GetTeacherByConditionReply) {
    option (google.api.http) = {
      post: "/api/v1/teacher/condition"
      body: "*"
    };
  }

  // list of teacher by batch id
  rpc ListByIDs(ListTeacherByIDsRequest) returns (ListTeacherByIDsReply) {
    option (google.api.http) = {
      post: "/api/v1/teacher/list/ids"
      body: "*"
    };
  }

  // list teacher by last id
  rpc ListByLastID(ListTeacherByLastIDRequest) returns (ListTeacherByLastIDReply) {
    option (google.api.http) = {
      get: "/api/v1/teacher/list"
    };
  }
}


/*
Notes for defining message fields:
    1. Suggest using camel case style naming for message field names, such as firstName, lastName, etc.
    2. If the message field name ending in 'id', it is recommended to use xxxID naming format, such as userID, orderID, etc.
    3. Add validate rules https://github.com/envoyproxy/protoc-gen-validate#constraint-rules, such as:
        uint64 id = 1 [(validate.rules).uint64.gte  = 1];

If used to generate code that supports the HTTP protocol, notes for defining message fields:
    1. If the route contains the path parameter, such as /api/v1/teacher/{id}, the defined
        message must contain the name of the path parameter and the name should be added
        with a new tag, such as int64 id = 1 [(tagger.tags) = "uri:\"id\""];
    2. If the request url is followed by a query parameter, such as /api/v1/getTeacher?name=Tom,
        a form tag must be added when defining the query parameter in the message, such as:
        string name = 1 [(tagger.tags) = "form:\"name\""].
    3. If the message field name contain underscores(such as 'field_name'), it will cause a problem
        where the JSON field names of the Swagger request parameters are different from those of the
        GRPC JSON tag names. There are two solutions: Solution 1, remove the underline from the
         message field name. Option 2, use the tool 'protoc-go-inject-tag' to modify the JSON tag name,
         such as: string first_name = 1 ; // @gotags: json:"firstName"
*/


message CreateTeacherRequest {
	string name = 1; 
	int32 age = 2; 
	string bornAt = 3; 
	Job job = 4; 
}

message CreateTeacherReply {
  string id = 1;
}

message DeleteTeacherByIDRequest {
  string id =1 [(validate.rules).string.min_len = 6, (tagger.tags) = "uri:\"id\""];
}

message DeleteTeacherByIDReply {

}

message UpdateTeacherByIDRequest {
	string id = 1 [(validate.rules).string.min_len = 6, (tagger.tags) = "uri:\"id\""]; 
	string name = 2; 
	int32 age = 3; 
	string bornAt = 4; 
	Job job = 5; 
}

message UpdateTeacherByIDReply {

}

message Teacher {
	string id = 1; 
	string name = 2; 
	int32 age = 3; 
	string bornAt = 4; 
	Job job = 5;
  repeated Book books = 6;
	string createdAt = 7;
	string updatedAt = 8;
}

message GetTeacherByIDRequest {
  string id =1 [(validate.rules).string.min_len = 6, (tagger.tags) = "uri:\"id\"" ];
}

message GetTeacherByIDReply {
  Teacher teacher = 1;
}

message ListTeacherRequest {
  api.types.Params params = 1;
}

message ListTeacherReply {
  int64 total = 1;
  repeated Teacher teachers = 2;
}

message DeleteTeacherByIDsRequest {
  repeated string ids = 1 [(validate.rules).repeated.min_items = 1];
}

message DeleteTeacherByIDsReply {

}

message GetTeacherByConditionRequest {
  types.Conditions conditions = 1;
}

message GetTeacherByConditionReply {
  Teacher teacher = 1;
}

message ListTeacherByIDsRequest {
  repeated string ids = 1 [(validate.rules).repeated.min_items = 1];
}

message ListTeacherByIDsReply {
  repeated Teacher teachers = 1;
}

message ListTeacherByLastIDRequest {
  string lastID = 1 [(tagger.tags) = "form:\"lastID\""]; // last id
  uint32 limit = 2 [(validate.rules).uint32.gt = 0, (tagger.tags) = "form:\"limit\""]; // limit size per page
  string sort = 3 [(tagger.tags) = "form:\"sort\""]; // sort by column name of table, default is -id, the - sign indicates descending order.
}

message ListTeacherByLastIDReply {
  repeated Teacher teachers = 1;
}

message Job {
  string title = 1;
  int32 salary = 2;
}

message Book {
  string fileId = 1;
  string fileName = 2;
  int64 fileSize = 3;
}


